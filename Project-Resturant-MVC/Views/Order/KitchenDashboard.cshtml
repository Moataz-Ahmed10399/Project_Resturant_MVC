@* @model List<Order>
@{
    ViewData["Title"] = "Kitchen Dashboard";
}

<div class="container-fluid mt-4">
    <h1 class="text-center text-danger mb-4">🍳 Kitchen Dashboard</h1>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show">
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show">
            @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    <div class="row">
        <!-- Pending Orders -->
        <div class="col-md-4">
            <div class="card shadow-sm">
                <div class="card-header bg-secondary text-white">
                    <h4>📋 Pending (@Model.Count(o => o.Status == OrderStatus.Pending))</h4>
                </div>
                <div class="card-body" style="max-height: 600px; overflow-y: auto;">
                    @foreach (var order in Model.Where(o => o.Status == OrderStatus.Pending))
                    {
                        <div class="card mb-2">
                            <div class="card-body">
                                <h5>Order #@order.Id</h5>
                                <p class="mb-1"><strong>@order.CustomerName</strong></p>
                                <p class="mb-1 text-muted small">@order.Type | @order.CreatedAt.ToString("HH:mm")</p>
                                <p class="mb-2">
                                    <strong>Items:</strong>
                                    @string.Join(", ", order.OrderItems.Select(oi => $"{oi.MenuItem.Name} x{oi.Quantity}"))
                                </p>
                                <a href="/Order/UpdateStatus/@order.Id" class="btn btn-warning btn-sm w-100">
                                    ➡️ Start Preparing
                                </a>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Preparing Orders -->
        <div class="col-md-4">
            <div class="card shadow-sm">
                <div class="card-header bg-warning text-dark">
                    <h4>🔥 Preparing (@Model.Count(o => o.Status == OrderStatus.Preparing))</h4>
                </div>
                <div class="card-body" style="max-height: 600px; overflow-y: auto;">
                    @foreach (var order in Model.Where(o => o.Status == OrderStatus.Preparing))
                    {
                        <div class="card mb-2">
                            <div class="card-body">
                                <h5>Order #@order.Id</h5>
                                <p class="mb-1"><strong>@order.CustomerName</strong></p>
                                <p class="mb-1 text-muted small">
                                    Prep Time: @order.OrderItems.Max(oi => oi.MenuItem.PreparationTimeMinutes) min
                                </p>
                                <p class="mb-2">
                                    <strong>Items:</strong>
                                    @string.Join(", ", order.OrderItems.Select(oi => $"{oi.MenuItem.Name} x{oi.Quantity}"))
                                </p>
                                <a href="/Order/UpdateStatus/@order.Id" class="btn btn-info btn-sm w-100">
                                    ✅ Mark as Ready
                                </a>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Ready Orders -->
        <div class="col-md-4">
            <div class="card shadow-sm">
                <div class="card-header bg-info text-white">
                    <h4>✅ Ready (@Model.Count(o => o.Status == OrderStatus.Ready))</h4>
                </div>
                <div class="card-body" style="max-height: 600px; overflow-y: auto;">
                    @foreach (var order in Model.Where(o => o.Status == OrderStatus.Ready))
                    {
                        <div class="card mb-2">
                            <div class="card-body">
                                <h5>Order #@order.Id</h5>
                                <p class="mb-1"><strong>@order.CustomerName</strong></p>
                                <p class="mb-1 text-muted small">
                                    Ready at: @order.ReadyAt?.ToString("HH:mm")
                                </p>
                                <p class="mb-2"><strong>@order.Type</strong></p>
                                <a href="/Order/UpdateStatus/@order.Id" class="btn btn-success btn-sm w-100">
                                    🚚 Mark as Delivered
                                </a>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div> *@


@model List<Order>
@{
    ViewData["Title"] = "Kitchen Dashboard";
}

<style>
    .kitchen-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 2rem;
        border-radius: 15px;
        color: white;
        margin-bottom: 2rem;
        box-shadow: 0 10px 30px rgba(102, 126, 234, 0.3);
    }

    .stats-bar {
        display: flex;
        justify-content: space-around;
        margin-bottom: 2rem;
        gap: 1rem;
    }

    .stat-card {
        flex: 1;
        background: white;
        padding: 1.5rem;
        border-radius: 12px;
        text-align: center;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

        .stat-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.15);
        }

    .stat-number {
        font-size: 2.5rem;
        font-weight: bold;
        margin-bottom: 0.5rem;
    }

    .stat-label {
        color: #6c757d;
        font-size: 0.9rem;
        text-transform: uppercase;
        letter-spacing: 1px;
    }

    .order-column {
        background: #f8f9fa;
        border-radius: 12px;
        padding: 1rem;
        min-height: 600px;
    }

    .order-card {
        background: white;
        border-radius: 10px;
        padding: 1.2rem;
        margin-bottom: 1rem;
        box-shadow: 0 2px 10px rgba(0,0,0,0.08);
        transition: all 0.3s ease;
        border-left: 4px solid transparent;
    }

        .order-card:hover {
            transform: translateX(5px);
            box-shadow: 0 4px 20px rgba(0,0,0,0.12);
        }

        .order-card.pending {
            border-left-color: #6c757d;
        }

        .order-card.preparing {
            border-left-color: #ffc107;
        }

        .order-card.ready {
            border-left-color: #17a2b8;
        }

    .order-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 0.8rem;
    }

    .order-number {
        font-size: 1.3rem;
        font-weight: bold;
        color: #2c3e50;
    }

    .order-time {
        background: #e9ecef;
        padding: 0.3rem 0.8rem;
        border-radius: 20px;
        font-size: 0.85rem;
        font-weight: 500;
    }

    .customer-info {
        margin-bottom: 0.8rem;
    }

    .customer-name {
        font-size: 1.1rem;
        font-weight: 600;
        color: #495057;
    }

    .order-type-badge {
        display: inline-block;
        padding: 0.25rem 0.8rem;
        border-radius: 15px;
        font-size: 0.8rem;
        font-weight: 600;
        margin-left: 0.5rem;
    }

    .order-items {
        background: #f8f9fa;
        padding: 0.8rem;
        border-radius: 8px;
        margin-bottom: 1rem;
        font-size: 0.9rem;
    }

    .order-items-title {
        font-weight: 600;
        color: #495057;
        margin-bottom: 0.5rem;
        font-size: 0.85rem;
        text-transform: uppercase;
    }

    .action-btn {
        width: 100%;
        padding: 0.8rem;
        border-radius: 8px;
        font-weight: 600;
        transition: all 0.3s ease;
        border: none;
        cursor: pointer;
    }

        .action-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        }

    .btn-start {
        background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
        color: white;
    }

    .btn-ready {
        background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
        color: white;
    }

    .btn-deliver {
        background: linear-gradient(135deg, #43e97b 0%, #38f9d7 100%);
        color: white;
    }

    .column-header {
        text-align: center;
        padding: 1rem;
        border-radius: 10px;
        margin-bottom: 1rem;
        font-weight: bold;
        font-size: 1.2rem;
        color: white;
    }

    .header-pending {
        background: linear-gradient(135deg, #868f96 0%, #596164 100%);
    }

    .header-preparing {
        background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
    }

    .header-ready {
        background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
    }

    .empty-state {
        text-align: center;
        padding: 3rem 1rem;
        color: #6c757d;
    }

        .empty-state i {
            font-size: 3rem;
            margin-bottom: 1rem;
            opacity: 0.3;
        }

    .prep-time-badge {
        background: #fff3cd;
        color: #856404;
        padding: 0.3rem 0.6rem;
        border-radius: 5px;
        font-size: 0.8rem;
        font-weight: 600;
    }
</style>

<div class="container-fluid mt-4">
    <!-- Enhanced Header -->
    <div class="kitchen-header">
        <h1 class="mb-0">🍳 Kitchen Dashboard</h1>
        <p class="mb-0 mt-2" style="opacity: 0.9;">Real-time order management system</p>
    </div>

    <!-- Alert Messages -->
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show shadow-sm">
            <strong>✅ Success!</strong> @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show shadow-sm">
            <strong>❌ Error!</strong> @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    <!-- Statistics Bar -->
    <div class="stats-bar">
        <div class="stat-card">
            <div class="stat-number text-secondary">@Model.Count(o => o.Status == OrderStatus.Pending)</div>
            <div class="stat-label">Pending</div>
        </div>
        <div class="stat-card">
            <div class="stat-number text-warning">@Model.Count(o => o.Status == OrderStatus.Preparing)</div>
            <div class="stat-label">Preparing</div>
        </div>
        <div class="stat-card">
            <div class="stat-number text-info">@Model.Count(o => o.Status == OrderStatus.Ready)</div>
            <div class="stat-label">Ready</div>
        </div>
        <div class="stat-card">
            <div class="stat-number text-success">@Model.Count(o => o.Status == OrderStatus.Delivered)</div>
            <div class="stat-label">Delivered Today</div>
        </div>
    </div>

    <!-- Orders Grid -->
    <div class="row g-3">
        <!-- Pending Orders -->
        <div class="col-lg-4">
            <div class="column-header header-pending">
                📋 Pending Orders
            </div>
            <div class="order-column">
                @{
                    var pendingOrders = Model.Where(o => o.Status == OrderStatus.Pending).ToList();
                }
                @if (pendingOrders.Any())
                {
                    foreach (var order in pendingOrders)
                    {
                        <div class="order-card pending">
                            <div class="order-header">
                                <span class="order-number">#@order.Id</span>
                                <span class="order-time">@order.CreatedAt.ToString("HH:mm")</span>
                            </div>
                            <div class="customer-info">
                                <span class="customer-name">@order.CustomerName</span>
                                <span class="order-type-badge bg-primary text-white">
                                    @order.Type
                                </span>
                            </div>
                            <div class="order-items">
                                <div class="order-items-title">📦 Order Items</div>
                                @foreach (var item in order.OrderItems)
                                {
                                    <div>• @item.MenuItem.Name × @item.Quantity</div>
                                }
                            </div>
                            <a href="/Order/UpdateStatus/@order.Id" class="action-btn btn-start">
                                ▶️ Start Preparing
                            </a>
                        </div>
                    }
                }
                else
                {
                    <div class="empty-state">
                        <div>📭</div>
                        <p>No pending orders</p>
                    </div>
                }
            </div>
        </div>

        <!-- Preparing Orders -->
        <div class="col-lg-4">
            <div class="column-header header-preparing">
                🔥 Preparing Orders
            </div>
            <div class="order-column">
                @{
                    var preparingOrders = Model.Where(o => o.Status == OrderStatus.Preparing).ToList();
                }
                @if (preparingOrders.Any())
                {
                    foreach (var order in preparingOrders)
                    {
                        <div class="order-card preparing">
                            <div class="order-header">
                                <span class="order-number">#@order.Id</span>
                                <span class="order-time">@order.CreatedAt.ToString("HH:mm")</span>
                            </div>
                            <div class="customer-info">
                                <span class="customer-name">@order.CustomerName</span>
                                <span class="prep-time-badge">
                                    ⏱️ @order.OrderItems.Max(oi => oi.MenuItem.PreparationTimeMinutes) min
                                </span>
                            </div>
                            <div class="order-items">
                                <div class="order-items-title">📦 Order Items</div>
                                @foreach (var item in order.OrderItems)
                                {
                                    <div>• @item.MenuItem.Name × @item.Quantity</div>
                                }
                            </div>
                            <a href="/Order/UpdateStatus/@order.Id" class="action-btn btn-ready">
                                ✅ Mark as Ready
                            </a>
                        </div>
                    }
                }
                else
                {
                    <div class="empty-state">
                        <div>🍳</div>
                        <p>No orders in preparation</p>
                    </div>
                }
            </div>
        </div>

        <!-- Ready Orders -->
        <div class="col-lg-4">
            <div class="column-header header-ready">
                ✅ Ready for Pickup/Delivery
            </div>
            <div class="order-column">
                @{
                    var readyOrders = Model.Where(o => o.Status == OrderStatus.Ready).ToList();
                }
                @if (readyOrders.Any())
                {
                    foreach (var order in readyOrders)
                    {
                        <div class="order-card ready">
                            <div class="order-header">
                                <span class="order-number">#@order.Id</span>
                                <span class="order-time">
                                    Ready: @order.ReadyAt?.ToString("HH:mm")
                                </span>
                            </div>
                            <div class="customer-info">
                                <span class="customer-name">@order.CustomerName</span>
                                <span class="order-type-badge
                                            @(order.Type == OrderType.Delivery ? "bg-success" : "bg-info") text-white">
                                    @(order.Type == OrderType.Delivery ? "🚚 Delivery" : "🏃 Takeaway")
                                </span>
                            </div>
                            <div class="order-items">
                                <div class="order-items-title">📦 Order Items</div>
                                @foreach (var item in order.OrderItems)
                                {
                                    <div>• @item.MenuItem.Name × @item.Quantity</div>
                                }
                            </div>
                            <a href="/Order/UpdateStatus/@order.Id" class="action-btn btn-deliver">
                                🚚 Mark as Delivered
                            </a>
                        </div>
                    }
                }
                else
                {
                    <div class="empty-state">
                        <div>✨</div>
                        <p>No orders ready</p>
                    </div>
                }
            </div>
        </div>
    </div>
</div>